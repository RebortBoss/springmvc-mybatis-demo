<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
	http://www.springframework.org/schema/aop  
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.1.xsd
	http://www.springframework.org/schema/cache 
	http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-lazy-init="false">

	<bean id="encryptPropertyPlaceholderConfigurer" class="com.tyxj.common.EncryptPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:init.properties</value>
				<value>classpath*:redis.properties</value>
				<value>classpath*:other.properties</value>
			</list>
		</property>
		<property name="encryptedProps">
			<set>
				<value>jdbc.username</value>
				<value>jdbc.password</value>
			</set>
		</property>
	</bean>

	<!-- import annotions -->
	<context:component-scan base-package="com.tyxj">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<mvc:annotation-driven />
	<task:annotation-driven />
	<aop:aspectj-autoproxy />
	
	<!-- <cache:annotation-driven cache-manager="cacheManager"/>
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:shared="false" />
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cacheManager-ref="cacheManagerFactory" /> -->

	<!-- import datasource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="100" /> 
		<property name="maxActive" value="200" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" /> 
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:spring/sqlMapConfig.xml"></property> 
        <property name="mapperLocations" value="classpath:mybatis/*.xml" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tyxj.dao.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="append*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="repair" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="delAndRepair" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
            <tx:method name="get*" read-only="true" propagation="REQUIRED" />
            <tx:method name="find*" read-only="true" propagation="REQUIRED" />
            <tx:method name="load*" read-only="true" propagation="REQUIRED" />
            <tx:method name="search*" read-only="true" propagation="REQUIRED" />
            <tx:method name="count*" read-only="true" propagation="REQUIRED" />
            <tx:method name="query*" read-only="true" propagation="REQUIRED" />
            <tx:method name="datagrid*" read-only="true" propagation="REQUIRED" />
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.tyxj.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
    
    <aop:aspectj-autoproxy/>
	
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="20" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="30000" />
		<!-- 线程池维护线程的最大数量 -->
		<property name="maxPoolSize" value="200" />
		<!-- 线程池所使用的缓冲队列 -->
		<property name="queueCapacity" value="20" />
	</bean>
	
	<!-- <bean id="beanstalkPool" class="com.tyxj.beanstalk.BeanstalkPool" scope="prototype">
		<constructor-arg index="0" value="${beanstalk.ip}"></constructor-arg>
		<constructor-arg index="1" value="${beanstalk.port}" />
		<constructor-arg index="2" value="${beanstalk.max}" />
	</bean> -->
</beans>